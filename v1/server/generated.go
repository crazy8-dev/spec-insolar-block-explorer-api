// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"net/http"
)

// CodeError defines model for code-error.
type CodeError struct {
	Code        *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	Message     *string `json:"message,omitempty"`
}

// CodeValidationError defines model for code-validation-error.
type CodeValidationError struct {
	Code               *string                   `json:"code,omitempty"`
	Description        *string                   `json:"description,omitempty"`
	Link               *string                   `json:"link,omitempty"`
	Message            *string                   `json:"message,omitempty"`
	ValidationFailures *[]CodeValidationFailures `json:"validation_failures,omitempty"`
}

// CodeValidationFailures defines model for code-validation-failures.
type CodeValidationFailures struct {

	// Failure reason.
	FailureReason *string `json:"failure_reason,omitempty"`

	// Property name.
	Property *string `json:"property,omitempty"`
}

// JetDrop defines model for jet-drop.
type JetDrop struct {

	// Record hash.
	Hash *string `json:"hash,omitempty"`

	// Jet drop ID is a combination of `jet_id` with `pulse_number`.
	JetDropId *string `json:"jet_drop_id,omitempty"`

	// Jet ID.
	JetId *string `json:"jet_id,omitempty"`

	// Next `jet_drop_id`.
	NextJetDropId *[]string `json:"next_jet_drop_id,omitempty"`

	// Previous `jet_drop_id`.
	PrevJetDropId *[]string `json:"prev_jet_drop_id,omitempty"`

	// Pulse number.
	PulseNumber *int64 `json:"pulse_number,omitempty"`

	// Number of all records in the pulse.
	RecordAmount *int64 `json:"record_amount,omitempty"`

	// Unix timestamp.
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// JetDrops defines model for jet-drops.
type JetDrops struct {
	Result *[]JetDrop `json:"result,omitempty"`

	// Number of entries in the array.
	Total *int64 `json:"total,omitempty"`
}

// Pulse defines model for pulse.
type Pulse struct {

	// Pulse completeness status.
	IsComplete *bool `json:"is_complete,omitempty"`

	// Number of all jet drops in the pulse.
	JetDropAmount *int64 `json:"jet_drop_amount,omitempty"`

	// Next pulse number.
	NextPulseNumber *int64 `json:"next_pulse_number,omitempty"`

	// Previous pulse number.
	PrevPulseNumber *int64 `json:"prev_pulse_number,omitempty"`

	// Pulse number.
	PulseNumber *int64 `json:"pulse_number,omitempty"`

	// Number of all records in the pulse.
	RecordAmount *int64 `json:"record_amount,omitempty"`

	// Unix timestamp.
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// Pulses defines model for pulses.
type Pulses struct {
	Result *[]Pulse `json:"result,omitempty"`

	// Number of entries in the array.
	Total *int64 `json:"total,omitempty"`
}

// Record defines model for record.
type Record struct {

	// Record hash.
	Hash *string `json:"hash,omitempty"`

	// Index is combination of pulse_number with order (record number in a jet drop).
	Index *string `json:"index,omitempty"`

	// Jet drop ID is a combination of `jet_id` with `pulse_number`.
	JetDropId *string `json:"jet_drop_id,omitempty"`

	// Jet ID.
	JetId *string `json:"jet_id,omitempty"`

	// Object reference.
	ObjectReference *string `json:"object_reference,omitempty"`

	// Order is the record order number in the jet drop.
	Order *int64 `json:"order,omitempty"`

	// Record payload.
	Payload *string `json:"payload,omitempty"`

	// Previous record reference.
	PrevRecordReference *string `json:"prev_record_reference,omitempty"`

	// Prototype reference.
	PrototypeReference *string `json:"prototype_reference,omitempty"`

	// Pulse number.
	PulseNumber *int64 `json:"pulse_number,omitempty"`

	// Record reference.
	Reference *string `json:"reference,omitempty"`

	// Unix timestamp.
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Record type.
	Type *string `json:"type,omitempty"`
}

// Records defines model for records.
type Records struct {
	Result *[]Record `json:"result,omitempty"`

	// Number of entries in the array.
	Total *int64 `json:"total,omitempty"`
}

// SearchJetDrop defines model for search-jet-drop.
type SearchJetDrop struct {

	// Meta data.
	Meta *struct {

		// Jet drop ID is a combination of `jet_id` with `pulse_number`.
		JetDropId *string `json:"jet_drop_id,omitempty"`
	} `json:"meta,omitempty"`

	// Result type.
	Type *string `json:"type,omitempty"`
}

// SearchLifeline defines model for search-lifeline.
type SearchLifeline struct {

	// Meta data.
	Meta *struct {

		// Object reference.
		ObjectReference *string `json:"object_reference,omitempty"`
	} `json:"meta,omitempty"`

	// Result type.
	Type *string `json:"type,omitempty"`
}

// SearchPulse defines model for search-pulse.
type SearchPulse struct {

	// Meta data.
	Meta *struct {

		// Pulse number.
		PulseNumber *int64 `json:"pulse_number,omitempty"`
	} `json:"meta,omitempty"`

	// Result type.
	Type *string `json:"type,omitempty"`
}

// SearchRecord defines model for search-record.
type SearchRecord struct {

	// Meta data.
	Meta *struct {

		// Index is combination of `pulse_number` with `order` (record number in a jet drop).
		Index *string `json:"index,omitempty"`

		// Object reference.
		ObjectReference *string `json:"object_reference,omitempty"`
	} `json:"meta,omitempty"`

	// Result type.
	Type *string `json:"type,omitempty"`
}

// FromPulseNumberParam defines model for fromPulseNumberParam.
type FromPulseNumberParam int64

// FromIndex defines model for from_index.
type FromIndex string

// FromJetDropId defines model for from_jet_drop_id.
type FromJetDropId string

// JetDropIdGt defines model for jet_drop_id_gt.
type JetDropIdGt string

// JetDropIdLt defines model for jet_drop_id_lt.
type JetDropIdLt string

// JetDropIdPath defines model for jet_drop_id_path.
type JetDropIdPath string

// JetIdPath defines model for jet_id_path.
type JetIdPath string

// Limit defines model for limit.
type Limit int

// ObjectReferencePath defines model for object_reference_path.
type ObjectReferencePath string

// OffsetParam defines model for offsetParam.
type OffsetParam int

// PulseNumberGt defines model for pulse_number_gt.
type PulseNumberGt int

// PulseNumberLt defines model for pulse_number_lt.
type PulseNumberLt int

// PulseNumberPath defines model for pulse_number_path.
type PulseNumberPath int64

// RecordTypeParam defines model for recordTypeParam.
type RecordTypeParam string

// SortByIndex defines model for sort_by_index.
type SortByIndex string

// SortByPulse defines model for sort_by_pulse.
type SortByPulse string

// TimestampGte defines model for timestamp_gte.
type TimestampGte int64

// TimestampLte defines model for timestamp_lte.
type TimestampLte int64

// N400Response defines model for 400Response.
type N400Response CodeValidationError

// N500Response defines model for 500Response.
type N500Response CodeError

// JetDropResponse defines model for jetDropResponse.
type JetDropResponse JetDrop

// JetDropsResponse defines model for jetDropsResponse.
type JetDropsResponse JetDrops

// PulseResponse defines model for pulseResponse.
type PulseResponse Pulse

// PulsesResponse defines model for pulsesResponse.
type PulsesResponse Pulses

// RecordsResponse defines model for recordsResponse.
type RecordsResponse Records

// SearchResponse defines model for searchResponse.
type SearchResponse interface{}

// JetDropRecordsParams defines parameters for JetDropRecords.
type JetDropRecordsParams struct {

	// Number of entries per page.
	Limit *Limit `json:"limit,omitempty"`

	// Number of entries to skip from the starting point.
	Offset *OffsetParam `json:"offset,omitempty"`

	// Specific index to paginate from—a combination of pulse_number with order (record number in a jet drop).
	FromIndex *FromIndex `json:"from_index,omitempty"`

	// record type in a query.
	Type *RecordTypeParam `json:"type,omitempty"`
}

// JetDropsByJetIDParams defines parameters for JetDropsByJetID.
type JetDropsByJetIDParams struct {

	// Number of entries per page.
	Limit *Limit `json:"limit,omitempty"`

	// Number of entries to skip from the starting point.
	Offset *OffsetParam `json:"offset,omitempty"`

	// Specific jet drop ID to paginate from—a combination of jet_id` with `pulse_number`.
	FromJetDropId *FromJetDropId `json:"from_jet_drop_id,omitempty"`

	// Pulse number-based sorting direction for the result set.
	SortBy *SortByPulse `json:"sort_by,omitempty"`

	// Starting point (>) for a range of jet drops.
	JetDropIdGt *JetDropIdGt `json:"jet_drop_id_gt,omitempty"`

	// Ending point (<) for a range of jet drops.
	JetDropIdLt *JetDropIdLt `json:"jet_drop_id_lt,omitempty"`
}

// ObjectLifelineParams defines parameters for ObjectLifeline.
type ObjectLifelineParams struct {

	// Number of entries per page.
	Limit *Limit `json:"limit,omitempty"`

	// Number of entries to skip from the starting point.
	Offset *OffsetParam `json:"offset,omitempty"`

	// Specific index to paginate from—a combination of pulse_number with order (record number in a jet drop).
	FromIndex *FromIndex `json:"from_index,omitempty"`

	// Index-based sorting direction for the result set.
	SortBy *SortByIndex `json:"sort_by,omitempty"`

	// Starting point (>) for a range of pulses.
	PulseNumberGt *PulseNumberGt `json:"pulse_number_gt,omitempty"`

	// Ending point (<) for a range of pulses.
	PulseNumberLt *PulseNumberLt `json:"pulse_number_lt,omitempty"`

	// Starting point (≥) for a timespan. Unix time format.
	TimestampGte *TimestampGte `json:"timestamp_gte,omitempty"`

	// Ending point (≥) for a timespan. Unix time format.
	TimestampLte *TimestampLte `json:"timestamp_lte,omitempty"`
}

// PulsesParams defines parameters for Pulses.
type PulsesParams struct {

	// Number of entries per page.
	Limit *Limit `json:"limit,omitempty"`

	// Number of entries to skip from the starting point.
	Offset *OffsetParam `json:"offset,omitempty"`

	// Specific pulse number to paginate from.
	FromPulseNumber *FromPulseNumberParam `json:"from_pulse_number,omitempty"`

	// Starting point (≥) for a timespan. Unix time format.
	TimestampGte *TimestampGte `json:"timestamp_gte,omitempty"`

	// Ending point (≥) for a timespan. Unix time format.
	TimestampLte *TimestampLte `json:"timestamp_lte,omitempty"`
}

// JetDropsByPulseNumberParams defines parameters for JetDropsByPulseNumber.
type JetDropsByPulseNumberParams struct {

	// Number of entries per page.
	Limit *Limit `json:"limit,omitempty"`

	// Number of entries to skip from the starting point.
	Offset *OffsetParam `json:"offset,omitempty"`

	// Specific jet drop ID to paginate from—a combination of jet_id` with `pulse_number`.
	FromJetDropId *FromJetDropId `json:"from_jet_drop_id,omitempty"`
}

// SearchParams defines parameters for Search.
type SearchParams struct {

	// Searching value.
	Value string `json:"value"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// jet drop by ID// (GET /api/v1/jet-drops/{jet_drop_id})
	JetDropByID(ctx echo.Context, jetDropId JetDropIdPath) error
	// records// (GET /api/v1/jet-drops/{jet_drop_id}/records)
	JetDropRecords(ctx echo.Context, jetDropId JetDropIdPath, params JetDropRecordsParams) error
	// jet drops by jet ID// (GET /api/v1/jets/{jet_id}/jet-drops)
	JetDropsByJetID(ctx echo.Context, jetId JetIdPath, params JetDropsByJetIDParams) error
	// object lifeline// (GET /api/v1/lifeline/{object_reference}/records)
	ObjectLifeline(ctx echo.Context, objectReference ObjectReferencePath, params ObjectLifelineParams) error
	// pulses// (GET /api/v1/pulses)
	Pulses(ctx echo.Context, params PulsesParams) error
	// pulse// (GET /api/v1/pulses/{pulse_number})
	Pulse(ctx echo.Context, pulseNumber PulseNumberPath) error
	// jet drops by pulse number// (GET /api/v1/pulses/{pulse_number}/jet-drops)
	JetDropsByPulseNumber(ctx echo.Context, pulseNumber PulseNumberPath, params JetDropsByPulseNumberParams) error
	// search// (GET /api/v1/search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// JetDropByID converts echo context to params.
func (w *ServerInterfaceWrapper) JetDropByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "jet_drop_id" -------------
	var jetDropId JetDropIdPath

	err = runtime.BindStyledParameter("simple", false, "jet_drop_id", ctx.Param("jet_drop_id"), &jetDropId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jet_drop_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JetDropByID(ctx, jetDropId)
	return err
}

// JetDropRecords converts echo context to params.
func (w *ServerInterfaceWrapper) JetDropRecords(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "jet_drop_id" -------------
	var jetDropId JetDropIdPath

	err = runtime.BindStyledParameter("simple", false, "jet_drop_id", ctx.Param("jet_drop_id"), &jetDropId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jet_drop_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params JetDropRecordsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "from_index" -------------
	if paramValue := ctx.QueryParam("from_index"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "from_index", ctx.QueryParams(), &params.FromIndex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from_index: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JetDropRecords(ctx, jetDropId, params)
	return err
}

// JetDropsByJetID converts echo context to params.
func (w *ServerInterfaceWrapper) JetDropsByJetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "jet_id" -------------
	var jetId JetIdPath

	err = runtime.BindStyledParameter("simple", false, "jet_id", ctx.Param("jet_id"), &jetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jet_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params JetDropsByJetIDParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "from_jet_drop_id" -------------
	if paramValue := ctx.QueryParam("from_jet_drop_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "from_jet_drop_id", ctx.QueryParams(), &params.FromJetDropId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from_jet_drop_id: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------
	if paramValue := ctx.QueryParam("sort_by"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "jet_drop_id_gt" -------------
	if paramValue := ctx.QueryParam("jet_drop_id_gt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "jet_drop_id_gt", ctx.QueryParams(), &params.JetDropIdGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jet_drop_id_gt: %s", err))
	}

	// ------------- Optional query parameter "jet_drop_id_lt" -------------
	if paramValue := ctx.QueryParam("jet_drop_id_lt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "jet_drop_id_lt", ctx.QueryParams(), &params.JetDropIdLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jet_drop_id_lt: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JetDropsByJetID(ctx, jetId, params)
	return err
}

// ObjectLifeline converts echo context to params.
func (w *ServerInterfaceWrapper) ObjectLifeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "object_reference" -------------
	var objectReference ObjectReferencePath

	err = runtime.BindStyledParameter("simple", false, "object_reference", ctx.Param("object_reference"), &objectReference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter object_reference: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ObjectLifelineParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "from_index" -------------
	if paramValue := ctx.QueryParam("from_index"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "from_index", ctx.QueryParams(), &params.FromIndex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from_index: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------
	if paramValue := ctx.QueryParam("sort_by"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "pulse_number_gt" -------------
	if paramValue := ctx.QueryParam("pulse_number_gt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "pulse_number_gt", ctx.QueryParams(), &params.PulseNumberGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pulse_number_gt: %s", err))
	}

	// ------------- Optional query parameter "pulse_number_lt" -------------
	if paramValue := ctx.QueryParam("pulse_number_lt"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "pulse_number_lt", ctx.QueryParams(), &params.PulseNumberLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pulse_number_lt: %s", err))
	}

	// ------------- Optional query parameter "timestamp_gte" -------------
	if paramValue := ctx.QueryParam("timestamp_gte"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timestamp_gte", ctx.QueryParams(), &params.TimestampGte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timestamp_gte: %s", err))
	}

	// ------------- Optional query parameter "timestamp_lte" -------------
	if paramValue := ctx.QueryParam("timestamp_lte"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timestamp_lte", ctx.QueryParams(), &params.TimestampLte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timestamp_lte: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ObjectLifeline(ctx, objectReference, params)
	return err
}

// Pulses converts echo context to params.
func (w *ServerInterfaceWrapper) Pulses(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PulsesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "from_pulse_number" -------------
	if paramValue := ctx.QueryParam("from_pulse_number"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "from_pulse_number", ctx.QueryParams(), &params.FromPulseNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from_pulse_number: %s", err))
	}

	// ------------- Optional query parameter "timestamp_gte" -------------
	if paramValue := ctx.QueryParam("timestamp_gte"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timestamp_gte", ctx.QueryParams(), &params.TimestampGte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timestamp_gte: %s", err))
	}

	// ------------- Optional query parameter "timestamp_lte" -------------
	if paramValue := ctx.QueryParam("timestamp_lte"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timestamp_lte", ctx.QueryParams(), &params.TimestampLte)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timestamp_lte: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Pulses(ctx, params)
	return err
}

// Pulse converts echo context to params.
func (w *ServerInterfaceWrapper) Pulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pulse_number" -------------
	var pulseNumber PulseNumberPath

	err = runtime.BindStyledParameter("simple", false, "pulse_number", ctx.Param("pulse_number"), &pulseNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pulse_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Pulse(ctx, pulseNumber)
	return err
}

// JetDropsByPulseNumber converts echo context to params.
func (w *ServerInterfaceWrapper) JetDropsByPulseNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pulse_number" -------------
	var pulseNumber PulseNumberPath

	err = runtime.BindStyledParameter("simple", false, "pulse_number", ctx.Param("pulse_number"), &pulseNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pulse_number: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params JetDropsByPulseNumberParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "from_jet_drop_id" -------------
	if paramValue := ctx.QueryParam("from_jet_drop_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "from_jet_drop_id", ctx.QueryParams(), &params.FromJetDropId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from_jet_drop_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JetDropsByPulseNumber(ctx, pulseNumber, params)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Required query parameter "value" -------------
	if paramValue := ctx.QueryParam("value"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument value is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "value", ctx.QueryParams(), &params.Value)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter value: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/v1/jet-drops/:jet_drop_id", wrapper.JetDropByID)
	router.GET("/api/v1/jet-drops/:jet_drop_id/records", wrapper.JetDropRecords)
	router.GET("/api/v1/jets/:jet_id/jet-drops", wrapper.JetDropsByJetID)
	router.GET("/api/v1/lifeline/:object_reference/records", wrapper.ObjectLifeline)
	router.GET("/api/v1/pulses", wrapper.Pulses)
	router.GET("/api/v1/pulses/:pulse_number", wrapper.Pulse)
	router.GET("/api/v1/pulses/:pulse_number/jet-drops", wrapper.JetDropsByPulseNumber)
	router.GET("/api/v1/search", wrapper.Search)

}

